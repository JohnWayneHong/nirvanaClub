plugins {
    id 'com.android.application'
}
apply from: "../default.gradle"
android {
    resourcePrefix "app_main"
    def android = rootProject.ext.android

    productFlavors {
        nomal {
            applicationId android.applicationId
        }
        coexist {
            applicationId android.applicationId + ".test"
            versionNameSuffix "-coexist"
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile.name.contains("prerelease")) {
                outputFileName = "${variant.versionName}_${variant.versionCode}" + "_${variant.name}.apk"
            } else if (outputFile.name.contains("release")) {
                outputFileName = "${variant.versionName}_${variant.versionCode}" + "_${variant.name}.apk"
            } else if (outputFile.name.contains("customtest")) {
                outputFileName = "${variant.versionName}_${variant.versionCode}" + "_${variant.name}.apk"
            } else if (outputFile.name.contains("debug")) {
                outputFileName = "${variant.versionName}_${variant.versionCode}" + "_${variant.name}.apk"
            }
            def outputFileDir = "${project.rootDir}/apk"
            // 打包完成后做的一些事,复制apk到指定文件夹
            variant.assembleProvider.get().doLast {
                File out = new File(outputFileDir)
                copy {
                    variant.outputs.forEach { file ->
                        //复制到指定文件夹
                        copy {
                            from file.outputFile
                            into out
                        }
                        if (!outputFile.name.contains("prerelease") && outputFile.name.contains("release")) {
                            copy {
                                from variant.mappingFileProvider.get()
                                into out
                                rename { String fileName ->
                                    "mapping_${rootProject.ext.android.applicationId}_${rootProject.ext.android.versionName}_${rootProject.ext.android.versionCode}.txt"
                                }
                            }
                        }
                        //移动到指定文件夹
//                        ant.move file: file.outputFile,
//                                todir: "${project.rootDir}/apk"
                    }

                }
            }
        }

    }
    variantFilter { variant ->
        def names = variant.flavors*.name + variant.name
        if (names.contains("coexistRelease") || names.contains("nomalCustomtest")
                || names.contains("nomalPrerelease") || names.contains("coexistPrerelease")) {
            setIgnore(true)
        }
        println names
    }
    namespace 'com.ggb.nirvanahappyclub'
    lint {
        abortOnError true
        checkOnly 'NewApi', 'InlinedApi'
        checkReleaseBuilds true
    }
}

dependencies {
    def dep = rootProject.ext.dep
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':shadowLibrary')
    implementation dep.common_library
//    implementation dep.scan_code_library
//    implementation dep.scan_nfc_library
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'me.jessyan:autosize:1.2.1'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
//    releaseImplementation("io.objectbox:objectbox-android:"+rootProject.ext.objectbox_version)
    releaseImplementation("io.objectbox:objectbox-android:"+rootProject.ext.objectbox_version)
    coexistImplementation("io.objectbox:objectbox-android-objectbrowser:"+rootProject.ext.objectbox_version)
    implementation 'top.zibin:Luban:1.1.8'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.10"
    //沉浸式框架
    implementation "com.geyifeng.immersionbar:immersionbar:3.2.0"
    implementation 'com.geyifeng.immersionbar:immersionbar-ktx:3.2.0'
    //RxTool 工具库
    implementation 'com.github.tamsiree.RxTool:RxUI:2.6.3'
    implementation 'com.github.tamsiree.RxTool:RxKit:2.6.3'
    implementation 'com.github.tamsiree.RxTool:RxFeature:2.6.3'
    //下拉刷新-和刘强东下拉刷新重复
//    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.1'
//    implementation 'com.scwang.smart:refresh-header-classics:2.0.1'
//    implementation 'com.scwang.smart:refresh-header-material:2.0.1'
//    implementation 'com.scwang.smart:refresh-header-two-level:2.0.1'
    //基于WebView的库
    implementation 'io.github.justson:agentweb-core:v5.1.1-androidx'
    implementation 'io.github.justson:agentweb-filechooser:v5.1.1-androidx' // (可选)
    implementation 'com.github.Justson:Downloader:v5.0.4-androidx' // (可选)
    //刘强东RecycleView加载框架
    implementation 'com.github.liangjingkanji:BRV:1.5.8'
    implementation 'com.github.liangjingkanji:Engine:0.0.74' // 刘强东快速开发基础库
    implementation 'com.airbnb.android:lottie:5.1.1' // 动画库


    //九图框架 BGAPhotoPicker-Android
    // -------------------- 以下4个库是必须依赖的 ----------------------------
    implementation 'com.github.bingoogolapple:BGAPhotoPicker-Android:2.0.3'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.github.bingoogolapple:BGABaseAdapter-Android:2.0.1'


    //测试工程所用-自动发布工具类
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.json:json:20231013'
}
apply plugin: 'io.objectbox'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
